// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorizersTransferred extends ethereum.Event {
  get params(): AuthorizersTransferred__Params {
    return new AuthorizersTransferred__Params(this);
  }
}

export class AuthorizersTransferred__Params {
  _event: AuthorizersTransferred;

  constructor(event: AuthorizersTransferred) {
    this._event = event;
  }

  get previousAuthorizers(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAuthorizers(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get clientId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get txid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Bridge extends ethereum.SmartContract {
  static bind(address: Address): Bridge {
    return new Bridge("Bridge", address);
  }

  authorizers(): Address {
    let result = super.call("authorizers", "authorizers():(address)", []);

    return result[0].toAddress();
  }

  try_authorizers(): ethereum.CallResult<Address> {
    let result = super.tryCall("authorizers", "authorizers():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rescueFunds(tokenToRescue: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "rescueFunds",
      "rescueFunds(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenToRescue),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_rescueFunds(
    tokenToRescue: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rescueFunds",
      "rescueFunds(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenToRescue),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userNonceMinted(param0: Address): BigInt {
    let result = super.call(
      "userNonceMinted",
      "userNonceMinted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userNonceMinted(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userNonceMinted",
      "userNonceMinted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserNonceMinted(to: Address): BigInt {
    let result = super.call(
      "getUserNonceMinted",
      "getUserNonceMinted(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );

    return result[0].toBigInt();
  }

  try_getUserNonceMinted(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserNonceMinted",
      "getUserNonceMinted(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAuthorizationValid(
    _amount: BigInt,
    _txid: Bytes,
    _nonce: BigInt,
    signatures: Array<Bytes>
  ): boolean {
    let result = super.call(
      "isAuthorizationValid",
      "isAuthorizationValid(uint256,bytes,uint256,bytes[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_nonce),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAuthorizationValid(
    _amount: BigInt,
    _txid: Bytes,
    _nonce: BigInt,
    signatures: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorizationValid",
      "isAuthorizationValid(uint256,bytes,uint256,bytes[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_nonce),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authorizers(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueFundsCall extends ethereum.Call {
  get inputs(): RescueFundsCall__Inputs {
    return new RescueFundsCall__Inputs(this);
  }

  get outputs(): RescueFundsCall__Outputs {
    return new RescueFundsCall__Outputs(this);
  }
}

export class RescueFundsCall__Inputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get tokenToRescue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RescueFundsCall__Outputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ResetUserNonceMintedCall extends ethereum.Call {
  get inputs(): ResetUserNonceMintedCall__Inputs {
    return new ResetUserNonceMintedCall__Inputs(this);
  }

  get outputs(): ResetUserNonceMintedCall__Outputs {
    return new ResetUserNonceMintedCall__Outputs(this);
  }
}

export class ResetUserNonceMintedCall__Inputs {
  _call: ResetUserNonceMintedCall;

  constructor(call: ResetUserNonceMintedCall) {
    this._call = call;
  }
}

export class ResetUserNonceMintedCall__Outputs {
  _call: ResetUserNonceMintedCall;

  constructor(call: ResetUserNonceMintedCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _clientId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _txid(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintForCall extends ethereum.Call {
  get inputs(): MintForCall__Inputs {
    return new MintForCall__Inputs(this);
  }

  get outputs(): MintForCall__Outputs {
    return new MintForCall__Outputs(this);
  }
}

export class MintForCall__Inputs {
  _call: MintForCall;

  constructor(call: MintForCall) {
    this._call = call;
  }

  get _for(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _txid(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class MintForCall__Outputs {
  _call: MintForCall;

  constructor(call: MintForCall) {
    this._call = call;
  }
}

export class IsAuthorizationValidCall extends ethereum.Call {
  get inputs(): IsAuthorizationValidCall__Inputs {
    return new IsAuthorizationValidCall__Inputs(this);
  }

  get outputs(): IsAuthorizationValidCall__Outputs {
    return new IsAuthorizationValidCall__Outputs(this);
  }
}

export class IsAuthorizationValidCall__Inputs {
  _call: IsAuthorizationValidCall;

  constructor(call: IsAuthorizationValidCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _txid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class IsAuthorizationValidCall__Outputs {
  _call: IsAuthorizationValidCall;

  constructor(call: IsAuthorizationValidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
