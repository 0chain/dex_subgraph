name: build-&-publish-docker-image

concurrency:
  group: "publish-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches: [ master,staging ]
  pull_request:
  workflow_dispatch:  
    inputs:
      latest_tag:
        description: 'type yes for building latest tag'
        default: 'no'
        required: true

jobs:
  publish_config:
    runs-on: [self-hosted, build]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v3
    - name: Build the project and generate config file
      run: |
        npm run build && npm run codegen
    # - name: Publish config file to IPFS

  dockerize_authorizer:
    runs-on: [self-hosted, build]
    steps:
    - uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
        SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
        echo ::set-output name=BRANCH::${BRANCH}
        echo ::set-output name=VERSION::${BRANCH}-${SHORT_SHA} 
        
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build an image of the project
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}
        DOCKERFILE_AUTH: "docker.local/build.authorizer/Dockerfile"
      run: |
        docker build -t $AUTHORIZER_REGISTRY:$TAG -f "$DOCKERFILE_AUTH" .
        docker tag $AUTHORIZER_REGISTRY:$TAG $AUTHORIZER_REGISTRY:latest
        docker tag $AUTHORIZER_REGISTRY:$TAG $AUTHORIZER_REGISTRY:staging
        docker push $AUTHORIZER_REGISTRY:$TAG
    - name: Push Authorizer Docker Image
      env:
        PUSH_LATEST: ${{ github.event.inputs.latest_tag }}
        BRANCH: ${{ steps.get_version.outputs.BRANCH }}
      run: |
        if [[ "$PUSH_LATEST" == "yes" ]]; then
          docker push $AUTHORIZER_REGISTRY:latest
        elif [[ "$BRANCH" == "staging" ]]; then
          docker push $AUTHORIZER_REGISTRY:staging
        fi